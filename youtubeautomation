# Device serial number of the receiver device
receiver_device_serial = "192.168.76.239:5555"

# Get the current time
current_time = datetime.now()

# ADB command to retrieve battery information
adb_command = ['adb', '-s', receiver_device_serial, 'shell', 'dumpsys', 'battery']

# Execute the ADB command and capture the output
result = subprocess.run(adb_command, capture_output=True, text=True)
result = subprocess.run(['adb', 'shell', 'dumpsys', 'battery'], capture_output=True, text=True)

# Parse the output to extract the battery percentage
battery_info = result.stdout.splitlines()
battery_percentage = None
for line in battery_info:
    if 'level' in line:
        battery_percentage = line.split(':')[1].strip()
print("Battery Percentage at the start of youtube:", battery_percentage)
time.sleep(2)
num_runs = 2
for run in range(num_runs):
    
 d(scrollable=True).scroll.toEnd(20)
 time.sleep(2)
 d(scrollable=True).scroll.toEnd(10)
 time.sleep(2)
 d(resourceId="com.android.launcher3:id/icon", text="YouTube").click()
 time.sleep(4)
 d(resourceId="com.google.android.youtube:id/menu_item_1").click()
 time.sleep(2)
 d(text="Search YouTube").set_text("LAVA V5 - First impressions")
 time.sleep(2)
 d.press("enter")
 time.sleep(5)
 d(scrollable=True).scroll.toEnd(0)
 time.sleep(10)
 d.click(500,300)
 time.sleep(10)
 d(resourceId="com.google.android.youtube:id/watch_player").click()
 time.sleep(1)
 d(resourceId="com.google.android.youtube:id/fullscreen_button").click()
 time.sleep(180)
 d.press("home")
 d(resourceId="com.android.systemui:id/recent_apps").click()
 time.sleep(2)
 d(text="CLEAR ALL").click()  
 time.sleep(2)
d.press('home')
result = subprocess.run(['adb', 'shell', 'dumpsys', 'battery'], capture_output=True, text=True)

# Parse the output to extract the battery percentage
battery_info = result.stdout.splitlines()
battery_percentage = None
for line in battery_info:
    if 'level' in line:
        battery_percentage = line.split(':')[1].strip()
print("Battery Percentage at the end of youtube:", battery_percentage)

# Stop the logcat process and capture the logs
logcat_process = subprocess.Popen(['adb', '-s', receiver_device_serial, 'logcat'], stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE, text=True)

# Sleep for a few seconds to capture logs
time.sleep(5)

# Get the current time after the test
end_time = datetime.now()

# Stop the logcat process and capture the logs
logcat_process.terminate()

# Capture the log output and errors
log_output, log_errors = logcat_process.communicate()

# Read the existing Excel file
existing_df = pd.read_excel(r'C:\Users\51010243\alarm_results.xlsx')

# Create a DataFrame to store the results and logs
results_df = pd.DataFrame(columns=['Current App', 'Start Time', 'Battery Percentage at Start', 'End Time', 'Battery Percentage at End', 'Logs'])
results_df.loc[3] = [current_app, current_time, battery_percentage, current_time, battery_percentage_end, log_output]

# Concatenate the existing DataFrame and the new DataFrame
combined_df = pd.concat([existing_df, results_df], axis=0)

# Save the updated DataFrame to the same Excel file
combined_df.to_excel('alarm_results.xlsx', index=False)


cwd = os.getcwd()
print("Current working directory:", cwd)
